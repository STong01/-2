1、回文数【1234321】
某数在某进制下是回文数：
#include <stdio.h>
#include <string.h>

int main2p()
{
	int n;
	int sn;
	int i;
	int tmp, sum = 0;

	scanf("%d%d", &n, &sn);

	for (i = n; i; i /= sn)
	{
		tmp = i % sn;
		sum = sum * sn + tmp;
	}

	if (n == sum)
	{
		printf("%d在%d进制下是回文数\n", n, sn);
	}
	else
	{
		printf("%d在%d进制下不是回文数\n", n, sn);
	}

	system("pause");
	return 0;
}
2、输出*塔形状。
#include <stdio.h>
#include <string.h>

int main1()
{
	int n;
	int i, j;

	scanf("%d", &n);

	for (i = 1; i <= n; i++)
	{
		for (j = 1; j <= n - i; j++)
		{
			putchar(' ');
		}

		for (j = 1; j <= 2 * i - 1; j++)
		{
			putchar('*');
		}
		putchar('\n');
	}

	for (i = n - 1; i >= 1; i--)
	{
		for (j = 1; j <= n - i; j++)
		{
			putchar(' ');
		}

		for (j = 1; j <= 2 * i - 1; j++)
		{
			putchar('*');
		}
		putchar('\n');
	}

	system("pause");
	return 0;
}
3、水仙花数。
#include <stdio.h>
#include <math.h>

int main2pp()
{
	int i, j;
	int tmp[10] = { 0 };
	int sum = 0;
	int count = 0;

	for (i = 0; i < 100000000; i++)
	{
		for (j = i; j; j /= 10)
		{
			tmp[count] = j % 10;
			count++;
		}

		for (j = 0; j < count; j++)
		{
			sum += pow(tmp[j], count);
		}

		if (sum == i)
		{
			printf("%d\n", i);
		}
		count = sum = 0;
	}



	system("pause");
	return 0;
}
4、折半法寻求数字。
#include <stdio.h>
#include <stdlib.h>

int findArgs(int a[], int n, int f)
{
	int i;
	for (i = 0; i < n; i++)
	{
		if (a[i] == f)
		{
			return i;
		}
	}
	return -1;
}

int halfFindArgs(int a[], int n, int f)
{
	int left = 0, right = n - 1;
	int mid;

	while (left <= right)
	{
		mid = (left + right) / 2;
		if (a[mid] < f)
		{
			left = mid + 1;
		}
		else if (a[mid] > f)
		{
			right = mid - 1;
		}
		else
		{
			return mid;
		}
	}
	return -1;
}

int main4()
{
	int a[10] = { 1, 3, 5, 6, 8, 10, 11, 14, 17, 20 };

	printf("%d\n", halfFindArgs(a, 10, 11));

	system("pause");
	return 0;
}
5、密码输入。
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int pwdJudge(char pwd[])
{
	char input[21] = { 0 };
	int i;

	for (i = 0; i < 3; i++)
	{
		scanf("%s", input);

		if (0 == strcmp(input, pwd))
		{
			return 1;
		}
	}
	return 0;
}

int main5()
{
	char pwd[21] = "bite49";

	if(pwdJudge(pwd))
	{ 
		printf("输入成功\n");
	}
	else
	{ 
		printf("输入失败\n");
	}
	return 0;
}
6、小写字母转大写字母。
#include <stdio.h>
#include <ctype.h>
#define isBigLetter(ch) (ch <= 'Z' && ch >= 'A')

int isSmallLetter(char ch)
{
	return ch <= 'z' && ch >= 'a';
}

int main()
{
	char ch;
	
	while (1)
	{ 
		ch = getchar();
		if (ch == '@')
		{
			break;
		}

		if (isSmallLetter(ch))
		{
			putchar(ch - 32);
		}
		else if (isBigLetter(ch))
		{
			putchar(ch + 32);
		}
		else if (isalnum(ch))
		{
			//do nothing
		}
		else
		{
			putchar(ch);
		}
	}
	return 0;
}
时间戳的引用：
#include <time.h>
{
srand((unsigned int)time(0));
}
7、数字在不同进制数下的显示。
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

void switchNum(int n, int sn)
{
	if (n)
	{
		switchNum(n / sn, sn);
		putchar("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[n % sn]);
	}
}


int main(){
	int n, sn;
	printf("请输入所求数字：");
	scanf("%d", &n);
	printf("请输入所求进制数：");
	scanf("%d", &sn);
	switchNum(n, sn);
	printf("\n");
	system("pause");
	return 0;
}
--------------------------------------------------------------------------------------------------------------------------------
1.编写函数： 
unsigned int reverse_bit(unsigned int value); 
这个函数的返回值value的二进制位模式从左到右翻转后的值。 

如： 
在32位机器上25这个值包含下列各位： 
00000000000000000000000000011001 
翻转后：（2550136832） 
10011000000000000000000000000000 
程序结果返回： 
2550136832 
#include <stdio.h>

unsigned int round(unsigned n)
{
	int i;
	unsigned int tmp, sum = 0;

	for (i = 0; i < 32; i++, n /= 2)
	{
		tmp = n % 2;
		sum = sum * 2 + tmp;
	}
	return sum;
}

int main121()
{
	printf("%u\n", round(25));
	/*
	int n = 15;
	int i, tmp, sum = 0, sn = 2;
	for (i = n; i; i /= sn)
	{
		tmp = i % sn;
		sum = sum * sn + tmp;
	}
	*/
	
	return 0;
}

2.不使用（a+b）/2这种方式，求两个数的平均值。 
int main()
{
	int a = 15;
	int b = 5;
	printf("%d\n", b+((a-b) >> 1));
	system("pause");
}


#include<stdio.h>
 
int main()
{
	int a = 15;
	int b = 5;
	printf("%d\n", (a + b) >> 1);
	system("pause");
}


#include <stdio.h>
#include <windows.h>
 
int main()
{
	int a = 25;
	int b = 5;
	printf("%d\n", (a&b) + ((a^b) >> 1));
	system("pause");
	return 0;
}

3.编程实现： 
一组数据中只有一个数字出现了一次。其他所有数字都是成对出现的。 
请找出这个数字。（使用位运算） 
#include <stdio.h>

int main123()
{
	int a[10] = { 1, 5, 2, 3, 4, 1, 6, 3, 4, 2 };
	int i;
	int sum = 0;

	for (i = 0; i < 9; i++)
	{
		sum ^= a[i];
	}

	int pos;
	for (i = 0; i < 32; i++)
	{
		if (sum & 1 << i)
		{
			pos = i;
			break;
		}
	}

	int num1 = 0, num2 = 0;
	for (i = 0; i < 10; i++)
	{
		if (a[i] & 1 << pos)
		{
			num1 ^= a[i];
		}
		else
		{
			num2 ^= a[i];
		}
	}
	printf("%d %d", num1, num2);
	return 0;
}
4. 
有一个字符数组的内容为:"student a am i", 
请你将数组的内容改为"i am a student". 
要求： 
不能使用库函数。 
只能开辟有限个空间（空间个数和字符串的长度无关）。 

student a am i 
i ma a tneduts 
i am a student 
#include <stdio.h>
#include <string.h>

void reverse_string(char * str, int i, int j)
{
	char tmp;

	for (; i < j; i++, j--)
	{
		tmp = str[i];
		str[i] = str[j];
		str[j] = tmp;
	}
}

void reverse_word2(char * str)
{
	int i;
	int start = 0, end = 0;

	for (i = 0; str[i]; i++)
	{
		if (str[i] == ' ')
		{
			end = i - 1;
			reverse_string(str, start, end);
			start = i + 1;
		}
	}
	reverse_string(str, start, i - 1);
	reverse_string(str, 0, i - 1);
}

void reverse_word(char * str)
{
	char tmp[256] = { 0 };
	char * p;

	while (p = strrchr(str, ' '))
	{
		strcat(tmp, p + 1);
		strcat(tmp, " ");
		*p = 0;
	}
	strcat(tmp, str);
	strcpy(str, tmp);
}

int main124()
{
	char str[] = "I don't like this class";
	reverse_word(str);
	puts(str);
	return 0;
}

1.调整数组使奇数全部都位于偶数前面。 

题目： 

输入一个整数数组，实现一个函数， 
来调整该数组中数字的顺序使得数组中所有的奇数位于数组的前半部分， 
所有偶数位于数组的后半部分。 
#include <stdio.h>

int main131()
{
	int a[9] = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	int i = 0, j = 8;
	int tmp;

	while (a[i++] % 2 && i <= 8);
	while (a[j--] % 2 == 0 && j >= 0);
	while (i <= j)
	{
		tmp = a[i - 1];
		a[i - 1] = a[j + 1];
		a[j + 1] = tmp;

		while (a[i++] % 2);
		while (a[j--] % 2 == 0);
	}

	for (i = 0; i < 9; i++)
	{
		printf("%d ", a[i]);
	}


	return 0;
}
2. 
//杨氏矩阵 
有一个二维数组. 
数组的每行从左到右是递增的，每列从上到下是递增的. 
在这样的数组中查找一个数字是否存在。 
时间复杂度小于O(N); 

数组： 
1 2 3 
2 3 4 
3 4 5 


1 3 4 
2 4 5 
4 5 6 

1 2 3 
4 5 6 
7 8 9 
#include <stdio.h>

int findNum(int a[][3], int x, int y, int f)
{
	int i = 0, j = y - 1;

	while (i < x && y >= 0)
	{
		if (a[i][j] > f)
		{
			j--;
		}
		else if (a[i][j] < f)
		{
			i++;
		}
		else
		{
			return 1;
		}
	}
	return 0;
}

int main()
{
	int a[][3] = { { 1, 3, 5 },
				   { 3, 5, 7 },
				   { 5, 7, 9 } };
	if (findNum(a, 3, 3, 7))
	{
		printf("找到了\n");
	}
	else
	{
		printf("没找到\n");
	}

	return 0;
}




























